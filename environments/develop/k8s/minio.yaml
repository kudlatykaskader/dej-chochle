### Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  clusterIP: None  # Makes this service headless for stable DNS entries.
  selector:
    app: minio  
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: web
      protocol: TCP
      port: 9001
      targetPort: 9001
---
### MinIO StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  serviceName: minio   # Must match the headless service name.
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2025
          env:
            - name: MINIO_ROOT_USER
              value: administrator
            - name: MINIO_ROOT_PASSWORD
              value: administrator
            - name: MINIO_DEFAULT_BUCKETS
              value: default
            - name: MINIO_BROWSER_REDIRECT_URL
              value: http://podej-dalej-dev.postio.pl/minio/
          ports:
            - containerPort: 9000
              hostPort: 9000
            - containerPort: 9001
              hostPort: 9001
          volumeMounts:
            - name: pd-dev-minio-data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: pd-dev-minio-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
### Job to Create the Bucket Automatically Using mc
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: create-bucket
#   namespace: pd-dev-ns
# spec:
#   template:
#     spec:
#       containers:
#         - name: create-bucket
#           image: minio/mc
#           command: ["/bin/sh", "-c"]
#           args:
#             - |
#                 echo "Configuring alias for MinIO";
#                 attempts=0;
#                 max_attempts=5;
#                 until mc config host add myminio http://minio:9000 administrator administrator || [ $attempts -eq $max_attempts ]; do
#                 attempts=$((attempts+1));
#                 echo "Attempt $attempts/$max_attempts: MinIO is not responding, retrying in 5 seconds...";
#                 sleep 5;
#                 done;
#                 if [ $attempts -eq $max_attempts ]; then
#                 echo "Error: MinIO is not responding after $max_attempts attempts.";
#                 exit 1;
#                 fi;
                
#                 echo "Creating bucket 'default'";
#                 mc mb myminio/default;
                
#                 echo "Setting anonymous download policy on bucket 'default'";
#                 mc anonymous set download myminio/default;
#       restartPolicy: Never
#   backoffLimit: 4
