###
# POSTGRES DEPLOYMENT + SERVICE
# For a real production cluster, consider using a StatefulSet and properly configured volumes.
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: postgres
          image: postgres:15
          env:
            - name: POSTGRES_DB
              value: db_name
            - name: POSTGRES_USER
              value: db_user
            - name: POSTGRES_PASSWORD
              value: db_pass
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: pd-dev-db-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pd-dev-db-data
          persistentVolumeClaim:
            claimName: pd-dev-db-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: pd-dev-ns
spec:
  selector:
    app: db
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: 5432

---
###
# BACKEND DEPLOYMENT + SERVICE
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
        - name: migrate
          imagePullPolicy: Always
          image: ghcr.io/warehog/dej-chochle/pd-backend:develop
          command: ["/bin/sh", "-c"]
          args: ["env && bundle exec rails db:migrate"]
          env:
            - name: RAILS_ENV
              value: production
            - name: DB_ADAPTER
              value: postgresql
            - name: DB_HOST
              value: db
            - name: DB_USER
              value: db_user
            - name: DB_PASS
              value: db_pass
            - name: DB_NAME
              value: db_name
      containers:
        - name: backend
          imagePullPolicy: Always
          image: ghcr.io/warehog/dej-chochle/pd-backend:develop
          env:
            - name: RAILS_ENV
              value: production
            - name: DB_ADAPTER
              value: postgresql
            - name: DB_HOST
              value: db
            - name: DB_USER
              value: db_user
            - name: DB_PASS
              value: db_pass
            - name: DB_NAME
              value: db_name
            - name: STORAGE_SERVICE
              value: minio
            - name: MINIO_BUCKET
              value: pd
            - name: MINIO_ENDPOINT
              value: minio:9000
            - name: MINIO_ACCESS_KEY_ID
              value: admin
            - name: MINIO_SECRET_ACCESS_KEY
              value: admin

          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: pd-dev-ns
spec:
  selector:
    app: backend
  ports:
    - name: http
      protocol: TCP
      port: 3000
      targetPort: 3000

---
###
# FRONTEND DEPLOYMENT + SERVICE
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: ghcr.io/warehog/dej-chochle/pd-frontend:develop
          imagePullPolicy: Always
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: pd-dev-ns
spec:
  selector:
    app: frontend
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80

---
### 
# MINIO DEPLOYMENT + SERVICE
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: quay.io/minio/minio:RELEASE.2025-01-20T14-49-07Z
          ports:
            - containerPort: 9000
            - containerPort: 9001
          env:
            - name: MINIO_ROOT_USER
              value: admin
            - name: MINIO_ROOT_PASSWORD
              value: admin
            - name: MINIO_DEFAULT_BUCKETS
              value: pd
          volumeMounts:
            - name: pd-dev-minio-data
              mountPath: /data
      volumes:
        - name: pd-dev-minio-data
          persistentVolumeClaim:
            claimName: pd-dev-minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: console
      protocol: TCP
      port: 9001
      targetPort: 9001
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pd-dev-minio-pvc
  namespace: pd-dev-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pd-dev-db-pvc
  namespace: pd-dev-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
