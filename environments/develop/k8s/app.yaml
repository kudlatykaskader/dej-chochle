###
# POSTGRES DEPLOYMENT + SERVICE
# For a real production cluster, consider using a StatefulSet and properly configured volumes.
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: postgres
          image: postgres:15
          env:
            - name: POSTGRES_DB
              value: db_name
            - name: POSTGRES_USER
              value: db_user
            - name: POSTGRES_PASSWORD
              value: db_pass
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: pd-dev-db-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pd-dev-db-data
          persistentVolumeClaim:
            claimName: pd-dev-db-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: pd-dev-ns
spec:
  selector:
    app: db
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: 5432

---
###
# BACKEND DEPLOYMENT + SERVICE
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
        - name: migrate
          imagePullPolicy: Always
          image: ghcr.io/warehog/dej-chochle/pd-backend:develop
          command: ["/bin/sh", "-c"]
          args: ["env && bundle exec rails db:migrate"]
          env:
            - name: RAILS_ENV
              value: development
            - name: DB_ADAPTER
              value: postgresql
            - name: DB_HOST
              value: db
            - name: DB_USER
              value: db_user
            - name: DB_PASS
              value: db_pass
            - name: DB_NAME
              value: db_name
      containers:
        - name: backend
          imagePullPolicy: Always
          image: ghcr.io/warehog/dej-chochle/pd-backend:develop
          env:
            - name: RAILS_ENV
              value: development
            - name: DB_ADAPTER
              value: postgresql
            - name: DB_HOST
              value: db
            - name: DB_USER
              value: db_user
            - name: DB_PASS
              value: db_pass
            - name: DB_NAME
              value: db_name
            - name: STORAGE_SERVICE
              value: minio
            - name: MINIO_BUCKET
              value: default
            - name: MINIO_ENDPOINT
              value: http://minio:9000
            - name: MINIO_ACCESS_KEY_ID
              value: administrator
            - name: MINIO_SECRET_ACCESS_KEY
              value: administrator
          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: pd-dev-ns
spec:
  selector:
    app: backend
  ports:
    - name: http
      protocol: TCP
      port: 3000
      targetPort: 3000

---
###
# FRONTEND DEPLOYMENT + SERVICE
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: ghcr.io/warehog/dej-chochle/pd-frontend:develop
          imagePullPolicy: Always
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: pd-dev-ns
spec:
  selector:
    app: frontend
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80

---
###
# MINIO DEPLOYMENT + SERVICE
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          args:
            - server
            - /storage
          env:
            - name: MINIO_ROOT_USER
              value: administrator
            - name: MINIO_ROOT_PASSWORD
              value: administrator
          ports:
            - containerPort: 9000
              hostPort: 9000
          volumeMounts:
            - name: pd-dev-minio-data
              mountPath: /data
      volumes:
        - name: pd-dev-minio-data
          persistentVolumeClaim:
            claimName: pd-dev-minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: web
      protocol: TCP
      port: 9001
      targetPort: 9001
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-bucket
  namespace: pd-dev-ns
spec:
  template:
    spec:
      containers:
        - name: create-bucket
          image: minio/mc
          command: ["/bin/sh", "-c"]
          args:
            - mc config host add myminio http://minio:9000 administrator administrator;
              mc mb myminio/default;
              mc anonymous set download myminio/default;
      restartPolicy: Never
  backoffLimit: 4

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: pd-dev-ns
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: console
      protocol: TCP
      port: 9001
      targetPort: 9001
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pd-dev-minio-pvc
  namespace: pd-dev-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pd-dev-db-pvc
  namespace: pd-dev-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
###
# CADDY CONFIGMAP
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: caddy-config
  namespace: pd-dev-ns
data:
  Caddyfile: |-
    {
      admin off
      auto_https disable_redirects
    }

    http:// {
      reverse_proxy /api/* backend:3000 { }
      reverse_proxy /rails/* backend:3000 { }
      reverse_proxy frontend:80 { }
    }

---
###
# CADDY DEPLOYMENT
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: caddy-proxy
  namespace: pd-dev-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: caddy-proxy
  template:
    metadata:
      labels:
        app: caddy-proxy
    spec:
      containers:
        - name: caddy
          image: caddy:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: caddy-config
              mountPath: /etc/caddy
      volumes:
        - name: caddy-config
          configMap:
            name: caddy-config

---
###
# CADDY SERVICE - PUBLIC ENTRY POINT
###
apiVersion: v1
kind: Service
metadata:
  name: caddy-proxy
  namespace: pd-dev-ns
spec:
  selector:
    app: caddy-proxy
  # Expose port 80 externally via NodePort (for dev),
  # or you might use LoadBalancer in a real environment.
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
