name: test & build

on:
  # 1) Pull requests targeting prod/develop
  pull_request:
    branches: [ "prod", "develop" ]
  # 2) Pushes to prod/develop
  push:
    branches: [ "prod", "develop" ]
  # 3) Manual trigger
  workflow_dispatch:

jobs:
  # -----------------------
  # 1) Verify Frontend
  # -----------------------
  verify-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'
      
      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

  # -----------------------
  # 2) Verify Backend
  # -----------------------
  verify-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install Ruby dependencies
        run: |
          cd backend
          bundle install

  # -----------------------
  # 3) Package Frontend
  # -----------------------
  package-frontend:
    # Only run if this is a push OR a manual (workflow_dispatch) event
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    needs: 
      - verify-frontend
      - verify-backend

    # Pass the branch name to each step (we can also do this via a separate 'Set env' step)
    env:
      BRANCH_NAME: ${{ github.ref_name }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      # 1) Production branch => Build + Archive (classic approach)
      - name: Set up Node (Production only)
        if: ${{ env.BRANCH_NAME == 'prod' }}
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'

      - name: Build & Archive React (Production)
        if: ${{ env.BRANCH_NAME == 'prod' }}
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Upload production artifacts
        if: ${{ env.BRANCH_NAME == 'prod' }}
        uses: actions/upload-artifact@v4
        with:
          name: front_app
          path: frontend/build

      # 2) Non-prod (develop, or any other branch) => Build Docker image
      - name: Docker login to GHCR
        if: ${{ env.BRANCH_NAME != 'prod' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image (Frontend)
        if: ${{ env.BRANCH_NAME != 'prod' }}
        run: |
          FRONT_IMAGE=ghcr.io/${{ github.repository }}/pd-frontend:${{ env.BRANCH_NAME }}
          echo "Building Frontend image => $FRONT_IMAGE"
          cd frontend
          docker build -t $FRONT_IMAGE .
          docker push $FRONT_IMAGE

  # -----------------------
  # 4) Package Backend
  # -----------------------
  package-backend:
    # Only run if this is a push OR a manual event
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    needs: 
      - verify-frontend
      - verify-backend

    env:
      BRANCH_NAME: ${{ github.ref_name }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (Backend)
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/pd-backend:${{ env.BRANCH_NAME }}
          echo "Building Backend image => $IMAGE_NAME"
          docker build -t $IMAGE_NAME ./backend
          docker push $IMAGE_NAME

  # -----------------------
  # 5) Deploy to DEVELOP
  # -----------------------
  deploy-develop:
    # Deploy if on the develop branch OR manually triggered
    if: ${{ github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch' }}
    environment: develop
    runs-on: ubuntu-latest
    needs:
      - package-backend
      - package-frontend

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      
      - name: SSH to Swarm manager (develop) and deploy
        uses: sagebind/docker-swarm-deploy-action@v2
        with:
          remote_host: ssh://${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }}
          ssh_private_key: ${{ secrets.DEV_SSH_PRIV_KEY }}
          ssh_public_key: ${{ secrets.DEV_SSH_PUB_KEY}}
          args: stack deploy --compose-file stack-dev.yaml podej_dalej_dev

  # -----------------------
  # 6) Deploy to PROD
  # -----------------------
  deploy-prod:
    # Deploy if on the prod branch OR manually triggered
    if: ${{ github.ref == 'refs/heads/prod' || github.event_name == 'workflow_dispatch' }}
    environment: prod
    runs-on: ubuntu-latest
    needs: 
      - package-backend
      - package-frontend

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Download frontend files
        uses: actions/download-artifact@v4
        with:
          name: front_app
          path: ./build_artifacts

      - name: Deploy React via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASS }}
          local-dir: ./build_artifacts
          server-dir: /home/admin/public_html

      - name: SSH to Swarm manager (prod) and deploy
        uses: sagebind/docker-swarm-deploy-action@v1
        with:
          ssh_host: ${{ secrets.SSH_HOST }}
          ssh_user: ${{ secrets.SSH_USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          stack_file: stack.yml
          stack_name: podej_dalej_prod
