name: test & build

on:
  # 1) Pull requests targeting prod/develop
  pull_request:
    branches: [ "prod", "develop" ]
  # 2) Pushes to prod/develop
  push:
    branches: [ "prod", "develop" ]
  # 3) Manual trigger
  workflow_dispatch:

jobs:
  # -----------------------
  # 1) Verify Frontend
  # -----------------------
  verify-frontend:
    # We remove the "if: ${{ github.event_name == 'pull_request' }}"
    # so that it runs for BOTH pull_request AND push AND manual triggers.
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'
      
      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

      # (Optional) Add test steps for your frontend, e.g.:
      # - name: Run frontend tests
      #   run: |
      #     cd frontend
      #     npm run test

  # -----------------------
  # 2) Verify Backend
  # -----------------------
  verify-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install Ruby dependencies
        run: |
          cd backend
          bundle install

      # (Optional) Add test steps for your backend, e.g.:
      # - name: Run Rails tests
      #   run: |
      #     cd backend
      #     bundle exec rails db:create db:migrate RAILS_ENV=test
      #     bundle exec rspec

  # -----------------------
  # 3) Package Frontend
  # -----------------------
  package-frontend:
    # Only run if this is a push OR a manual (workflow_dispatch) event
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-latest

    # Must complete verification jobs first
    needs: 
      - verify-frontend
      - verify-backend

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'

      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

      - name: Build React app
        run: |
          cd frontend
          npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: front_app
          path: frontend/build

  # -----------------------
  # 4) Package Backend
  # -----------------------
  package-backend:
    # Only run if this is a push OR a manual (workflow_dispatch) event
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-latest

    needs: 
      - verify-frontend
      - verify-backend

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # For pushing to GHCR, you need a token with write:packages permission
          # This can be your repo's GITHUB_TOKEN if you set permissions properly, or a PAT in secrets.GHCR_TOKEN
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/myapp
          docker build -t $IMAGE_NAME:latest ./backend
          docker push $IMAGE_NAME:latest

  # -----------------------
  # 5) Deploy to Prod
  # -----------------------
  deploy-prod:
    # Deploy only if on the prod branch OR manually triggered
    if: ${{ github.ref == 'refs/heads/prod' || github.event_name == 'workflow_dispatch' }}

    # Mark environment as 'prod' (so environment secrets can be used, if any)
    environment: prod

    runs-on: ubuntu-latest

    # Wait for packaging jobs
    needs: 
      - package-backend
      - package-frontend

    steps:
      - name: Download frontend files
        uses: actions/download-artifact@v4
        with:
          name: front_app
          path: ./build_artifacts

      - name: Deploy React via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASS }}
          local-dir: ./build_artifacts
          server-dir: /home/admin/public_html

      - name: SSH to Swarm manager and deploy
        uses: sagebind/docker-swarm-deploy-action@v1
        with:
          ssh_host: ${{ secrets.SSH_HOST }}
          ssh_user: ${{ secrets.SSH_USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          stack_file: stack.yml
          stack_name: podej_dalej_prod
