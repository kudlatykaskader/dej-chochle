name: release

on:
  push:
    branches: [ "prod", "develop" ]
  workflow_dispatch:

jobs:
  package:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      BRANCH_NAME: ${{ github.ref_name }}
    outputs:
      image_tag: ${{ steps.determine_tag.outputs.tag }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Production versioning (semantic)
      - name: Get production version
        id: get_prod_version
        if: env.BRANCH_NAME == 'prod'
        uses: thenativeweb/get-next-version@main
        with:
          prefix: 'v'

      # Development versioning (branch-based)
      - name: Generate development version
        id: get_dev_version
        if: env.BRANCH_NAME == 'develop'
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y%m%d')
          echo "version=dev-$DATE-${{ github.run_number }}-$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Determine image tag
        id: determine_tag
        run: |
          if [ "$BRANCH_NAME" = "prod" ]; then
            TAG="${{ steps.get_prod_version.outputs.version }}"
          else
            TAG="${{ steps.get_dev_version.outputs.version }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create production git tag
        if: |
          env.BRANCH_NAME == 'prod' &&
          steps.get_prod_version.outputs.hasNextVersion == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.get_prod_version.outputs.version }}
          git push origin ${{ steps.get_prod_version.outputs.version }}

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push frontend
        if: env.BRANCH_NAME != 'prod'
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/pd-frontend:${{ steps.determine_tag.outputs.tag }}
          docker build -t $IMAGE ./frontend
          docker push $IMAGE

      - name: Build & push backend
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/pd-backend:${{ steps.determine_tag.outputs.tag }}
          docker build -t $IMAGE ./backend
          docker push $IMAGE

  deploy-develop:
    if: ${{ github.ref == 'refs/heads/develop' }}
    environment: develop
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Update manifests
        run: |
          sed -i "s|pd-frontend:.*|pd-frontend:${{ needs.package.outputs.image_tag }}|g" environments/develop/k8s/app.yaml
          sed -i "s|pd-backend:.*|pd-backend:${{ needs.package.outputs.image_tag }}|g" environments/develop/k8s/app.yaml
      
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          manifests: environments/develop/k8s/app.yaml
          kubeconfig: ${{ secrets.PL_LP_K3S_CONFIG }}

  deploy-prod:
    if: ${{ github.ref == 'refs/heads/prod' || github.event_name == 'workflow_dispatch' }}
    environment: prod
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Validate production version
        run: |
          if [[ ! "${{ needs.package.outputs.image_tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid production version format!"
            exit 1
          fi

      - name: Update manifests
        run: |
          sed -i "s|pd-frontend:.*|pd-frontend:${{ needs.package.outputs.image_tag }}|g" environments/prod/k8s/app.yaml
          sed -i "s|pd-backend:.*|pd-backend:${{ needs.package.outputs.image_tag }}|g" environments/prod/k8s/app.yaml

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          manifests: environments/prod/k8s/app.yaml
          kubeconfig: ${{ secrets.PL_LP_K3S_CONFIG }}
          strategy: canary