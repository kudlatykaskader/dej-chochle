name: deploy

on:
  push:
    branches: [ "prod", "develop" ]

jobs:
  verify-frontend:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out code
      - name: Check out repository
        uses: actions/checkout@v2

      # Step 5: Set up Node for the React frontend
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      
      # Step 6: Install Node dependencies
      - name: Install Node dependencies
        run: |
          cd frontend
          npm install

  verify-backend:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out code
      - name: Check out repository
        uses: actions/checkout@v2

      # Step 2: Set up Ruby
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      # Step 3: Install Ruby dependencies (Rails backend)
      - name: Install Ruby dependencies
        run: |
          cd backend
          bundle install
  
  package-backend:
    if: ${{ github_event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out code
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/myapp
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest
  
  package-frontend:
    if: ${{ github_event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      # Step 7: Build React app
      - name: Build React app
        run: |
          cd frontend
          npm run build

  
  deploy-prod:
    if: github.ref == 'refs/heads/prod'
    environment: prod
    runs-on: ubuntu-latest
    needs: 
      - package-backend
      - package-frontend
    steps:
      - name: SSH to Swarm manager and deploy
        uses: sagebind/docker-swarm-deploy-action@v1
        with:
          ssh_host: ${{ secrets.SSH_HOST }}
          ssh_user: ${{ secrets.SSH_USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          stack_file: docker-compose.yml
          stack_name: my_stack